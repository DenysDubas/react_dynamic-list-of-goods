{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","map","good","style","color","name","id","getAll","fetch","then","response","ok","json","Promise","reject","Error","statusText","Sort","App","useState","setGoods","isChoosedType","setIsChoosedType","hasError","setHasError","handleGetGoods","useCallback","loadType","a","goodsFromServer","All","FiveFirst","OnlyRed","sort","first","second","localeCompare","slice","filter","className","type","classNames","onClick","ReactDOM","render","document","getElementById"],"mappings":"uPAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAEE,UAAQ,OACRC,MAAO,CAAEC,MAAOF,EAAKE,OAHvB,SAKGF,EAAKG,MAJDH,EAAKI,UCPX,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GACJ,OAAKA,EAASC,GAMPD,EAASE,OALPC,QAAQC,OACb,IAAIC,MAAML,EAASM,gBAQtB,ICTFC,G,SAAAA,K,WAAAA,E,UAAAA,E,sBAAAA,E,mBAAAA,M,KAOE,IAAMC,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAOnB,EAAP,KAAcoB,EAAd,KACA,EAA0CD,oBAAS,GAAnD,mBAAOE,EAAP,KAAsBC,EAAtB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KAEMC,EAAiBC,sBAAW,uCAAC,WAAOC,GAAP,eAAAC,EAAA,sDAC7BC,EAA0B,GAE9BP,GAAiB,GAHgB,cAMvBK,EANuB,cAOxBV,EAAKa,IAPmB,SAUxBb,EAAKc,UAVmB,UAaxBd,EAAKe,QAbmB,mCAQHzB,IARG,cAQ3BsB,EAR2B,qDDF5BtB,IACJE,MAAK,SAAAT,GAAK,OAAIA,EACZiC,MAAK,SAACC,EAAOC,GAAR,OAAmBD,EAAM7B,KAAK+B,cAAcD,EAAO9B,SACxDgC,MAAM,EAAG,MCDqB,eAW3BR,EAX2B,qDDK5BtB,IACJE,MAAK,SAAAT,GAAK,OAAIA,EACZsC,QAAO,SAAApC,GAAI,MAAmB,QAAfA,EAAKE,YCPU,eAc3ByB,EAd2B,2CAiB3BA,EAAkB,GAjBS,6BAqB/BT,EAASS,GArBsB,kDAuB/BL,GAAY,GAvBmB,yBAyB/BF,GAAiB,GAzBc,6EAAD,sDA2B/B,IAEH,OACE,sBAAKiB,UAAU,MAAf,UACE,oBAAIA,UAAU,KAAd,mCAEA,wBACEC,KAAK,SACL,UAAQ,aACRD,UAAWE,IAAW,SACpB,CAAE,aAAcpB,IAClBqB,QAAS,kBAAMjB,EAAe,QALhC,4BAUA,wBACEe,KAAK,SACL,UAAQ,oBACRD,UAAWE,IAAW,SACpB,CAAE,aAAcpB,IAClBqB,QAAS,kBAAMjB,EAAe,cALhC,gCAUA,wBACEe,KAAK,SACL,UAAQ,aACRD,UAAWE,IAAW,SACpB,CAAE,aAAcpB,IAClBqB,QAAS,kBAAMjB,EAAe,YALhC,4BAUCF,EAEG,oBAAIgB,UAAU,kCAAd,yCAIA,cAAC,EAAD,CAAWvC,MAAOA,QCvF5B2C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.98a3306e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        style={{ color: good.color }}\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(response.statusText),\n        );\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods\n      .sort((first, second) => first.name.localeCompare(second.name))\n      .slice(0, 5));\n};\n\nexport const getRed = () => {\n  return getAll()\n    .then(goods => goods\n      .filter(good => good.color === 'red'));\n};\n","import React, { useCallback, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport classNames from 'classnames';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\n\nimport { getAll, get5First, getRed } from './api/goods';\nimport { Good } from './types/Good';\n\nenum Sort {\n  Default = '',\n  All = 'all',\n  FiveFirst = 'fiveFirst',\n  OnlyRed = 'onlyRed',\n}\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [isChoosedType, setIsChoosedType] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const handleGetGoods = useCallback(async (loadType: string) => {\n    let goodsFromServer: Good[] = [];\n\n    setIsChoosedType(true);\n\n    try {\n      switch (loadType) {\n        case Sort.All:\n          goodsFromServer = await getAll();\n          break;\n        case Sort.FiveFirst:\n          goodsFromServer = await get5First();\n          break;\n        case Sort.OnlyRed:\n          goodsFromServer = await getRed();\n          break;\n        default:\n          goodsFromServer = [];\n          break;\n      }\n\n      setGoods(goodsFromServer);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsChoosedType(false);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"h1\">Dynamic list of Goods</h1>\n\n      <button\n        type=\"button\"\n        data-cy=\"all-button\"\n        className={classNames('button',\n          { 'is-loading': isChoosedType })}\n        onClick={() => handleGetGoods('all')}\n      >\n        Load all goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        className={classNames('button',\n          { 'is-loading': isChoosedType })}\n        onClick={() => handleGetGoods('fiveFirst')}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"red-button\"\n        className={classNames('button',\n          { 'is-loading': isChoosedType })}\n        onClick={() => handleGetGoods('onlyRed')}\n      >\n        Load red goods\n      </button>\n\n      {hasError\n        ? (\n          <h1 className=\"notification is-danger is-light\">\n            Oops, something went wrong!\n          </h1>\n        ) : (\n          <GoodsList goods={goods} />\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}